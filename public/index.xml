<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>brettkk</title>
    <link>http://brettkk.github.io/</link>
    <description>Recent content on brettkk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 27 Jun 2021 11:33:56 +0800</lastBuildDate><atom:link href="http://brettkk.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>k8s 学习</title>
      <link>http://brettkk.github.io/posts/cloud_native/k8s/</link>
      <pubDate>Sun, 27 Jun 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/k8s/</guid>
      <description>k8s架构 🔗请求访问pod的流程 🔗hostNetwork： 占</description>
    </item>
    
    <item>
      <title>runc</title>
      <link>http://brettkk.github.io/posts/cloud_native/runc/</link>
      <pubDate>Sat, 26 Jun 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/runc/</guid>
      <description>runc 是根据OCI（Open Container Initiative）开放容器标准</description>
    </item>
    
    <item>
      <title>prometheus</title>
      <link>http://brettkk.github.io/posts/cloud_native/prometheus/</link>
      <pubDate>Thu, 24 Jun 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/prometheus/</guid>
      <description>在解决内存与磁盘的读写模式、性能的不匹配问题。有以下两点： 在</description>
    </item>
    
    <item>
      <title>加密相关</title>
      <link>http://brettkk.github.io/posts/os/encrypt/</link>
      <pubDate>Thu, 20 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/encrypt/</guid>
      <description>对称加密与散列 🔗有des, aes 方式， 计算性能好，但密钥的安全依</description>
    </item>
    
    <item>
      <title>golang</title>
      <link>http://brettkk.github.io/posts/golang/golang/</link>
      <pubDate>Fri, 07 May 2021 18:54:41 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang/</guid>
      <description>资料 🔗 目前golang的主要maintainer: Russ Cox 个人主</description>
    </item>
    
    <item>
      <title>go同步编码方式</title>
      <link>http://brettkk.github.io/posts/golang/golang_sync/</link>
      <pubDate>Thu, 06 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_sync/</guid>
      <description>golang提供了比较便捷的并发编程方式。golang的并发</description>
    </item>
    
    <item>
      <title>go test</title>
      <link>http://brettkk.github.io/posts/golang/go_test/</link>
      <pubDate>Wed, 05 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_test/</guid>
      <description>工具 🔗 Guru 导航go 代码的编辑器集成工具 变量，函数的声明地点 变量</description>
    </item>
    
    <item>
      <title>go timer</title>
      <link>http://brettkk.github.io/posts/golang/go_timer/</link>
      <pubDate>Wed, 05 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_timer/</guid>
      <description>Go提供了两种定时器，分为：一次性定时器、周期性定时器。 两种</description>
    </item>
    
    <item>
      <title>http, curl, dns</title>
      <link>http://brettkk.github.io/posts/os/http/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/http/</guid>
      <description>http http header 常用字段 content-type (如何解析body) application/x-www-form-urlencoded multipart/from-data, 上传文件 application/json, text/plain text/xml, XML</description>
    </item>
    
    <item>
      <title>linux-base</title>
      <link>http://brettkk.github.io/posts/os/base_os/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/base_os/</guid>
      <description>Linux 版本 uname -a 查看系统的版本 debian/ubuntu redhat/fedora/centos 各种源码协议 必须开源： LGPL Mozilla GPL</description>
    </item>
    
    <item>
      <title>linux-free</title>
      <link>http://brettkk.github.io/posts/os/free/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/free/</guid>
      <description>free查看内存使用情况，包含已用内存，可用内存，交换内存的</description>
    </item>
    
    <item>
      <title>linux-shell</title>
      <link>http://brettkk.github.io/posts/os/shell-basic/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/shell-basic/</guid>
      <description>单引号，双引号，反引号区别 单引号之间的内容原封不动的输出 双引</description>
    </item>
    
    <item>
      <title>linux-tcp</title>
      <link>http://brettkk.github.io/posts/os/tcp/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/tcp/</guid>
      <description>tcp报文结构图 URG: 表示紧急指针（urgent pointer）</description>
    </item>
    
    <item>
      <title>linux-top</title>
      <link>http://brettkk.github.io/posts/os/top/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/top/</guid>
      <description>linux top命令（mac top结果显示有一些区别） Linux下常</description>
    </item>
    
    <item>
      <title>mac安装开发环境</title>
      <link>http://brettkk.github.io/posts/tools/mac_start_dev/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/mac_start_dev/</guid>
      <description>新电脑构建开发环境，安装指南 iterm2 brew zsh, ohmyzsh golang vscode hugo github direnv 安装终端窗口工</description>
    </item>
    
    <item>
      <title>mysql 小结</title>
      <link>http://brettkk.github.io/posts/store_db/mysql/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/mysql/</guid>
      <description>存储 🔗存储引擎-是创建表时设置，存储引擎是表级别的使用 innodb: 只有</description>
    </item>
    
    <item>
      <title>redis 小结</title>
      <link>http://brettkk.github.io/posts/store_db/redis/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/redis/</guid>
      <description>支持的value类型： 字符串，hash，列表，集合，有序集合</description>
    </item>
    
    <item>
      <title>soot, wala</title>
      <link>http://brettkk.github.io/posts/java/soot_wala/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/java/soot_wala/</guid>
      <description>4中IR Baf 在bytecode上进行的抽象，忽略字节码对于常量</description>
    </item>
    
    <item>
      <title>vs code 小结</title>
      <link>http://brettkk.github.io/posts/tools/vs_code/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/vs_code/</guid>
      <description>快捷键内置查询表 菜单栏-》帮助-》快捷键参考-》very good 自</description>
    </item>
    
    <item>
      <title>安全与风控</title>
      <link>http://brettkk.github.io/posts/os/secure_risk/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/secure_risk/</guid>
      <description>漏洞 起因是信任了用户的任意输入。 sql注入 危害： 执行任意sq</description>
    </item>
    
    <item>
      <title>电影对白</title>
      <link>http://brettkk.github.io/posts/francais/common_sense/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/francais/common_sense/</guid>
      <description>《scent of a woman》 Slade this is such a crock of shit Slade you are in the Barrett school not</description>
    </item>
    
    <item>
      <title>bug_fix</title>
      <link>http://brettkk.github.io/posts/golang/bug_fix/</link>
      <pubDate>Tue, 04 May 2021 19:10:43 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/bug_fix/</guid>
      <description>一些bug init() 函数滥用 函数功能是查询类的，能不用指针传参数就不</description>
    </item>
    
    <item>
      <title>Alphabet Français</title>
      <link>http://brettkk.github.io/posts/francais/fran%C3%A7ais/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/francais/fran%C3%A7ais/</guid>
      <description>mac下输入快捷键 🔗法语特殊符输入方法（Mac下） œ = option + q</description>
    </item>
    
    <item>
      <title>go lock</title>
      <link>http://brettkk.github.io/posts/golang/go_lock/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_lock/</guid>
      <description>locks 锁 源码包的结构 🔗 sync包 sync.Mutex sync.RWMutex sync.Cond sync.WaitGroup sync.Once sync.Pool 涉及的内容很多 cache line padding</description>
    </item>
    
    <item>
      <title>go内存模型</title>
      <link>http://brettkk.github.io/posts/golang/gomemorymodel/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/gomemorymodel/</guid>
      <description>go的内存模型规定： 在哪些情况下，一个golang中读取的变</description>
    </item>
    
    <item>
      <title>go_toolchain</title>
      <link>http://brettkk.github.io/posts/golang/go_toolchain/</link>
      <pubDate>Sat, 01 May 2021 18:54:41 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_toolchain/</guid>
      <description>an overview of go&#39;s tooling 🔗 table of content installing tooling $ GO111MODULE=on go get golang.org/x/tools/cmd/stresss go get -u, 强制使用网络去更新包和</description>
    </item>
    
    <item>
      <title>europe</title>
      <link>http://brettkk.github.io/posts/francais/euro/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/francais/euro/</guid>
      <description>欧洲历史 欧洲历史 古希腊，罗马文明 古希腊文明 苏格拉底 柏拉图 亚里</description>
    </item>
    
    <item>
      <title>k8s 编码模式学习</title>
      <link>http://brettkk.github.io/posts/cloud_native/k8s_code_pattern/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/k8s_code_pattern/</guid>
      <description>draft todo k8s 组件 kubectl client-go kube-apiserver kube-controller kube-scheduler kubelet kube-proxy 周围项目 🔗k8s.io/gengo k8s.io/client-go</description>
    </item>
    
    <item>
      <title>matrix</title>
      <link>http://brettkk.github.io/posts/math/matrix/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/matrix/</guid>
      <description>3b1b 视频系列 线性代数 矩阵的几何意义 矩阵是对空间的一次变化 行列式</description>
    </item>
    
    <item>
      <title>等额本息</title>
      <link>http://brettkk.github.io/posts/math/loan/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/loan/</guid>
      <description>涉及的变量 🔗 本金M 期数N 利率R 等额本息X 公式推导 🔗当N=1时</description>
    </item>
    
    <item>
      <title>java 小结</title>
      <link>http://brettkk.github.io/posts/java/java/</link>
      <pubDate>Fri, 05 Mar 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/java/java/</guid>
      <description>Class文件格式图 1 class文件由十个部分组成 javap</description>
    </item>
    
    <item>
      <title>kubernetes</title>
      <link>http://brettkk.github.io/posts/cloud_native/my-first-post/</link>
      <pubDate>Wed, 03 Mar 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/my-first-post/</guid>
      <description>service mesh 🔗微服务内部有分布式环境下的通用功能：熔断策略、负载均衡</description>
    </item>
    
    <item>
      <title>lsm 小结</title>
      <link>http://brettkk.github.io/posts/store_db/log_structure_tree/</link>
      <pubDate>Wed, 03 Mar 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/log_structure_tree/</guid>
      <description>lsm 基本想法 🔗使用场景， 写多读少，例如存调用链的服务。 应用：l</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/other/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/other/</guid>
      <description>约瑟夫环 🔗 1-N个人，形成一个圈，从编号为1开始报数1，数到M的人x出列，x之后的人再次从1开始喊 直到最后一个人，求这个人的编号
 数组 🔗遍历数组，数到m的位置标记为-1， 直到数组中仅剩一个非-1的元素，返回元素的位置
环形链表 🔗不做标记，直接从环形链表中删除。
type Node struct{ int num, next Node, } func createCircleLink(int n) Node{ head := Node{num: 1} cur = head for i := 2; i &amp;lt; n; i++ { tmp := Node{num: i} cur.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/queue/</guid>
      <description>type Queue struct { items []int } func New() *Queue { return &amp;amp;Queue{ items: []int{} } } func (q *Queue) Enqueue(item int) { q.items = append(q.items, item) } func (q *Queue) Dequeue() int { if len(q.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/string/</guid>
      <description>字符串格式的数字相加 🔗最长回文子串 🔗字符串匹配算法 🔗BM KMP</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/math/algeb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/algeb/</guid>
      <description>高等代数
 研究对象  初中， 方程，一元一次方程。ax+b = c。 一元二次方程，求根公式。
一元高次方程的求根
n元线性方程组， 矩阵消元法，增广矩阵经过初等行变换，变为阶梯形矩阵。
二元一次方程。
行列式，矩阵，初等变换，线性方程组求解。
高斯消元法 --初等变换--》 阶梯形方程组 --》 非零行的行数为矩阵的秩
解的情况判定和解的结构 矩阵的秩与解的关系
矩阵的特征值和特征向量，几何意义 相似矩阵，相似对角化，二次型的标准型与规范型 合同变换，合同矩阵。 正交矩阵，正交变换
 偏序关系  集合之间的包含关系 实数之间的小于等于关系 实数之间的大于等于关系 整数之间的整除关系    自反： 反对称： R是集合A上的关系，如果R是自反的，反对称的，传递的，R是A上的一个偏序或者半序。  偏序集合  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/</guid>
      <description>1 极限，连续 🔗连续的定义 🔗初等函数在定义域内都是连续的。 一般讨论高等函数，如分段函数。
极限的定义 🔗极限的求法 🔗无穷小 $$ lim $$
，无穷大
洛必达法则求极限
 2 导数（微商），微分 🔗导数叫微商，是极限。
导数的定义。 🔗导数的几何意义。 🔗斜率
求导的方法 🔗复合函数的求导
隐函数的求导。
导数的应用 🔗单调性，求极值，凹凸性（二阶导数）
 3 不定积分，定积分 🔗不定积分 🔗不定积分： 求函数f的全部原函数。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/os/file_system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/file_system/</guid>
      <description>块存储、文件存储、对象存储
 存储的两种方式  用电子存储数据 U盘，固态硬盘SSD 用磁性记录数据 机械硬盘HDD 垂直式 叠瓦式    linux: 一切皆文件。
分布式存储
同步IO 异步IO： 指的是I/O 的执行者，是同步处理后返回，还是先返回给应用程序后异步通知。
阻塞IO 非阻塞IO： 指的是IO的调用者，是阻塞等待结果，还是异步等通知。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/rust/rust_chain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/rust/rust_chain/</guid>
      <description>https://justjjy.com/ solidity 智能合约语言。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/store_db/store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/store/</guid>
      <description>块存储 🔗文件存储 🔗对象存储 🔗对象存储系统： 接入层， 索引层（mysql， redis，etcd），存储层，服务平台
索引： 单对象，分片对象</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/tools/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/git/</guid>
      <description>git入门 🔗 搭建git环境 文件添加， 与git库的交互 解决合并冲突 创建分支列表 创建标签  git reflog 显示所有提交过的版本信息，包含提交，回退，删除的记录。 git log 不包含删除的commit记录和reset的操作。
项目历史管理
DAG，
使用git进行程序开发
工作区管理
协作开发
信任链，
分支应用
集成变更
历史记录管理
子项目管理
git的定制和扩展
git日常管理
git最佳实践</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/tools/latex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/latex/</guid>
      <description>使用中文字体 🔗使用xeCJK包，同时需要使用xeLaTex进行编译
gif image in laTex Beamer 🔗brew install imagemagick
convert kiss.gif -coalesce foo.png
mac原生的mac previewer无法浏览gif, 下载Adobe Reader, then All is well.
js 写ppt 🔗reveal.js</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/tools/pkg_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/pkg_tools/</guid>
      <description>安装goyacc
go get modernc.org/goyacc
https://pkg.go.dev/golang.org/x/tools/cmd/goyacc
 slidev  markdown, ppt https://sli.dev/ github.com/slidevjs/slidev    </description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/tools/pku_%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/pku_%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E6%8A%80%E6%9C%AF/</guid>
      <description>软件分析技术（Software Analysis）
哥德尔不完备定理
莱斯定理
数据流分析
过程间分析，指针分析，控制流分析，抽象解释
约束求解，符号执行
数据流分析 🔗活跃变量分析
可达性分析
可用表达式分析
https://xiongyingfei.github.io/SA/2020/main.htm
《编译原理》Aho
《Lecture notes on static analysis》Moller and Schwartzbach
https://cs.au.dk/~amoeller/spa/
南京大学《软件分析》课（B站视频）
《Decision Procedures -- An Algorithmic Point of View》 Daniel Kroening and Ofer Strichman</description>
    </item>
    
  </channel>
</rss>
