<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on brettkk</title>
    <link>http://brettkk.github.io/posts/</link>
    <description>Recent content in Posts on brettkk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
<<<<<<< HEAD
    <lastBuildDate>Thu, 20 May 2021 11:33:56 +0800</lastBuildDate><atom:link href="http://brettkk.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
=======
    <lastBuildDate>Thu, 20 May 2021 11:33:56 +0800</lastBuildDate>
    
	<atom:link href="http://brettkk.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
    <item>
      <title>加密相关</title>
      <link>http://brettkk.github.io/posts/os/encrypt/</link>
      <pubDate>Thu, 20 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/encrypt/</guid>
<<<<<<< HEAD
      <description>对称加密 有des, aes 方式， 计算性能好，但密钥的安全依赖于双方</description>
=======
      <description>对称加密 🔗有des, aes 方式， 计算性能好，但密钥的安全依赖于双</description>
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
    </item>
    
    <item>
      <title>golang</title>
      <link>http://brettkk.github.io/posts/golang/golang/</link>
      <pubDate>Fri, 07 May 2021 18:54:41 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang/</guid>
<<<<<<< HEAD
      <description>资料 目前golang的主要maintainer: Russ Cox 个人主页</description>
=======
      <description>资料 🔗 目前golang的主要maintainer: Russ Cox 个人主</description>
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
    </item>
    
    <item>
      <title>go同步编码方式</title>
      <link>http://brettkk.github.io/posts/golang/golang_sync/</link>
      <pubDate>Thu, 06 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/golang_sync/</guid>
      <description>golang提供了比较便捷的并发编程方式。golang的并发</description>
    </item>
    
    <item>
      <title>go test</title>
      <link>http://brettkk.github.io/posts/golang/go_test/</link>
      <pubDate>Wed, 05 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_test/</guid>
<<<<<<< HEAD
      <description>工具 Guru 导航go 代码的编辑器集成工具 变量，函数的声明地点 变量，</description>
=======
      <description>工具 🔗 Guru 导航go 代码的编辑器集成工具 变量，函数的声明地点 变量</description>
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
    </item>
    
    <item>
      <title>go timer</title>
      <link>http://brettkk.github.io/posts/golang/go_timer/</link>
      <pubDate>Wed, 05 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_timer/</guid>
      <description>Go提供了两种定时器，分为一次性定时器、周期性定时器。 两种定</description>
    </item>
    
    <item>
      <title>http, curl, dns</title>
      <link>http://brettkk.github.io/posts/os/http/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/http/</guid>
      <description>http http header 常用字段 content-type (如何解析body) application/x-www-form-urlencoded multipart/from-data, 上传文件 application/json, text/plain text/xml, XML</description>
    </item>
    
    <item>
      <title>linux-base</title>
      <link>http://brettkk.github.io/posts/os/base_os/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/base_os/</guid>
      <description>Linux 版本 uname -a 查看系统的版本 debian/ubuntu redhat/fedora/centos 各种源码协议 必须开源： LGPL Mozilla GPL</description>
    </item>
    
    <item>
      <title>linux-free</title>
      <link>http://brettkk.github.io/posts/os/free/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/free/</guid>
      <description>free查看内存使用情况，包含已用内存，可用内存，交换内存的</description>
    </item>
    
    <item>
      <title>linux-shell</title>
      <link>http://brettkk.github.io/posts/os/shell-basic/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/shell-basic/</guid>
      <description>单引号，双引号，反引号区别 单引号之间的内容原封不动的输出 双引</description>
    </item>
    
    <item>
      <title>linux-tcp</title>
      <link>http://brettkk.github.io/posts/os/tcp/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/tcp/</guid>
      <description>tcp报文结构图 URG: 表示紧急指针（urgent pointer）</description>
    </item>
    
    <item>
      <title>linux-top</title>
      <link>http://brettkk.github.io/posts/os/top/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/top/</guid>
      <description>linux top命令（mac top结果显示有一些区别） Linux下常</description>
    </item>
    
    <item>
      <title>mysql 小结</title>
      <link>http://brettkk.github.io/posts/store_db/mysql/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/mysql/</guid>
<<<<<<< HEAD
      <description>存储 存储引擎-是创建表时设置，存储引擎是表级别的使用 innodb: 只有数</description>
=======
      <description>存储 🔗存储引擎-是创建表时设置，存储引擎是表级别的使用 innodb: 只有</description>
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
    </item>
    
    <item>
      <title>redis 小结</title>
      <link>http://brettkk.github.io/posts/store_db/redis/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/redis/</guid>
      <description>支持的value类型： 字符串，hash，列表，集合，有序集合</description>
    </item>
    
    <item>
      <title>soot, wala</title>
      <link>http://brettkk.github.io/posts/java/soot_wala/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/java/soot_wala/</guid>
      <description>4中IR Baf 在bytecode上进行的抽象，忽略字节码对于常量</description>
    </item>
    
    <item>
      <title>vs code 小结</title>
      <link>http://brettkk.github.io/posts/tools/vs_code/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/tools/vs_code/</guid>
      <description>快捷键内置查询表 菜单栏-》帮助-》快捷键参考-》very good 自</description>
    </item>
    
    <item>
      <title>安全与风控</title>
      <link>http://brettkk.github.io/posts/os/secure_risk/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/secure_risk/</guid>
      <description>漏洞 起因是信任了用户的任意输入。 sql注入 危害： 执行任意sq</description>
    </item>
    
    <item>
      <title>电影对白</title>
      <link>http://brettkk.github.io/posts/francais/common_sense/</link>
      <pubDate>Wed, 05 May 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/francais/common_sense/</guid>
      <description>《scent of a woman》 Slade this is such a crock of shit Slade you are in the Barrett school not</description>
    </item>
    
    <item>
      <title>bug_fix</title>
      <link>http://brettkk.github.io/posts/golang/bug_fix/</link>
      <pubDate>Tue, 04 May 2021 19:10:43 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/bug_fix/</guid>
      <description>一些bug init() 函数滥用 函数功能是查询类的，能不用指针传参数就不</description>
    </item>
    
    <item>
      <title>Alphabet Français</title>
      <link>http://brettkk.github.io/posts/francais/fran%C3%A7ais/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/francais/fran%C3%A7ais/</guid>
<<<<<<< HEAD
      <description>mac下输入快捷键 法语特殊符输入方法（Mac下） œ = option + q ç</description>
=======
      <description>mac下输入快捷键 🔗法语特殊符输入方法（Mac下） œ = option + q</description>
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
    </item>
    
    <item>
      <title>go lock</title>
      <link>http://brettkk.github.io/posts/golang/go_lock/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_lock/</guid>
<<<<<<< HEAD
      <description>locks 锁 源码包的结构 sync包 sync.Mutex sync.RWMutex sync.Cond sync.WaitGroup sync.Once sync.Pool 涉及的内容很多 cache line padding no</description>
=======
      <description>locks 锁 源码包的结构 🔗 sync包 sync.Mutex sync.RWMutex sync.Cond sync.WaitGroup sync.Once sync.Pool 涉及的内容很多 cache line padding</description>
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
    </item>
    
    <item>
      <title>go内存模型</title>
      <link>http://brettkk.github.io/posts/golang/gomemorymodel/</link>
      <pubDate>Mon, 03 May 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/gomemorymodel/</guid>
      <description>go的内存模型规定： 在哪些情况下，一个golang中读取的变</description>
    </item>
    
    <item>
      <title>go_toolchain</title>
      <link>http://brettkk.github.io/posts/golang/go_toolchain/</link>
      <pubDate>Sat, 01 May 2021 18:54:41 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/golang/go_toolchain/</guid>
<<<<<<< HEAD
      <description>an overview of go&#39;s tooling table of content installing tooling $ GO111MODULE=on go get golang.org/x/tools/cmd/stresss go get -u, 强制使用网络去更新包和它</description>
=======
      <description>an overview of go&#39;s tooling 🔗 table of content installing tooling $ GO111MODULE=on go get golang.org/x/tools/cmd/stresss go get -u, 强制使用网络去更新包和</description>
    </item>
    
    <item>
      <title>etcd</title>
      <link>http://brettkk.github.io/posts/cloud_native/etcd/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/etcd/</guid>
      <description>etcd架构分为4部分 http server store raft wal etcd使用场景 API：Et</description>
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
    </item>
    
    <item>
      <title>europe</title>
      <link>http://brettkk.github.io/posts/francais/euro/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/francais/euro/</guid>
      <description>欧洲历史 欧洲历史 古希腊，罗马文明 古希腊文明 苏格拉底 柏拉图 亚里</description>
    </item>
    
    <item>
      <title>k8s 编码模式学习</title>
      <link>http://brettkk.github.io/posts/cloud_native/k8s_code_pattern/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/k8s_code_pattern/</guid>
<<<<<<< HEAD
      <description>k8s 组件 kubectl client-go kube-apiserver kube-controller kube-scheduler kubelet kube-proxy 周围项目 k8s.io/gengo k8s.io/client-go 项目组织结构 cobra命令行</description>
=======
      <description>学习一些设计模式，有助于理解k8s的源码。 Go Design Pattern k8s 组件 kubectl client-go kube-apiserver</description>
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
    </item>
    
    <item>
      <title>matrix</title>
      <link>http://brettkk.github.io/posts/math/matrix/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/matrix/</guid>
      <description>线性代数 矩阵的几何意义 矩阵是对空间的一次变化 行列式的意义： 经</description>
    </item>
    
    <item>
      <title>等额本息</title>
      <link>http://brettkk.github.io/posts/math/loan/</link>
      <pubDate>Mon, 05 Apr 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/math/loan/</guid>
<<<<<<< HEAD
      <description>涉及的变量 本金M 期数N 利率R 等额本息X 公式推导 当N=1时， $$</description>
=======
      <description>涉及的变量 🔗 本金M 期数N 利率R 等额本息X 公式推导 🔗当N=1时</description>
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
    </item>
    
    <item>
      <title>etcd_raft</title>
      <link>http://brettkk.github.io/posts/cloud_native/etcd_raft/</link>
      <pubDate>Fri, 05 Mar 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/etcd_raft/</guid>
      <description>raft基本思想：少数服从多数。 leader 选举 发起投票 每个节点为fo</description>
    </item>
    
    <item>
      <title>java 小结</title>
      <link>http://brettkk.github.io/posts/java/java/</link>
      <pubDate>Fri, 05 Mar 2021 11:33:56 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/java/java/</guid>
      <description>Class文件格式图 1 class文件由十个部分组成 javap</description>
    </item>
    
    <item>
      <title>kubernetes</title>
      <link>http://brettkk.github.io/posts/cloud_native/my-first-post/</link>
      <pubDate>Wed, 03 Mar 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/my-first-post/</guid>
<<<<<<< HEAD
      <description>service mesh 微服务内部有分布式环境下的通用功能：熔断策略、负载均衡、</description>
=======
      <description>service mesh 🔗微服务内部有分布式环境下的通用功能：熔断策略、负载均衡</description>
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
    </item>
    
    <item>
      <title>lsm 小结</title>
      <link>http://brettkk.github.io/posts/store_db/log_structure_tree/</link>
      <pubDate>Wed, 03 Mar 2021 18:34:48 +0800</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/log_structure_tree/</guid>
<<<<<<< HEAD
      <description>lsm 基本想法 使用场景， 写多读少，例如存调用链的服务。 应用：le</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/cloud_native/etcd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/cloud_native/etcd/</guid>
      <description>qq@d--- title: &amp;quot;etcd&amp;quot; date: 2021-04-05T11:33:56+08:00 draft: false isCJKLanguage: true
tags: [&amp;quot;cloud native&amp;quot;]
  etcd架构分为4部分  http server store raft wal      etcd使用场景
 API：Etcd提供HTTP+JSON, gRPC接口，跨平台跨语言; 支持https 共享配置 服务发现 选主 分布式队列 分布式锁    play.</description>
=======
      <description>lsm 基本想法 🔗使用场景， 写多读少，例如存调用链的服务。 应用：l</description>
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/backtracking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/backtracking/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/queue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/queue/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  type Queue struct { items []int } func New() *Queue { return &amp;amp;Queue{ items: []int{} } } func (q *Queue) Enqueue(item int) { q.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/stack/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  type Stack struct { items []int } func NewStack() *Stack{ return &amp;amp;Stack{ items: []int{} } } func (s *Stack) Push(value int) { s.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/string/</guid>
<<<<<<< HEAD
      <description>字符串格式的数字相加 最长回文子串 </description>
=======
      <description>字符串格式的数字相加 🔗最长回文子串 🔗</description>
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/leetcode/tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/leetcode/tree/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70  type TreeNode struct { value int left *TreeNode right *TreeNode } // bin search tree type BinTree struct { root *TreeNode } func (t *BinTree) Insert(value int) { node := &amp;amp;TreeNode{value, nil, nil} if t.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/os/file_system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/os/file_system/</guid>
      <description>块存储、文件存储、对象存储
 存储的两种方式  用电子存储数据 U盘，固态硬盘SSD 用磁性记录数据 机械硬盘HDD 垂直式 叠瓦式    linux: 一切皆文件。
分布式存储
同步IO 异步IO： 指的是I/O 的执行者，是同步处理后返回，还是先返回给应用程序后异步通知。
阻塞IO 非阻塞IO： 指的是IO的调用者，是阻塞等待结果，还是异步等通知。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://brettkk.github.io/posts/store_db/store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://brettkk.github.io/posts/store_db/store/</guid>
<<<<<<< HEAD
      <description>块存储 文件存储 对象存储 对象存储系统： 接入层， 索引层（mysql， redis，etcd），存储层，服务平台
=======
      <description>块存储 🔗文件存储 🔗对象存储 🔗对象存储系统： 接入层， 索引层（mysql， redis，etcd），存储层，服务平台
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
索引： 单对象，分片对象</description>
    </item>
    
  </channel>
<<<<<<< HEAD
</rss>
=======
</rss>
>>>>>>> aeebfcb4061c11947a7400a533ab3ad216cf2444
